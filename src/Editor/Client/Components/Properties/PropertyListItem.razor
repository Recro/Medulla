@using Medulla.Editor.Client.Components.Properties.Types
@* Licensed to the Medulla Contributors under one or more agreements. *@
@* The Medulla Contributors licenses this file to you under the Apache 2.0 license. *@
@* See the LICENSE file in the project root for more information. *@

<Window WindowTitle="@PropertyMenuStructureNode.Nameable.Title">
    <div class="TimelineItem TimelineItem--condensed">
        @{
            var hasNoChildren = PropertyMenuStructureNode.HasNoChildren();
        }
        <PropertyListItemIcon PropertyMenuStructureNode="PropertyMenuStructureNode" PropertiesMenu="PropertiesMenu" />
        <div class="TimelineItem-body">
            @if (hasNoChildren)
            {
                <p class="pb-1">@PropertyMenuStructureNode.Nameable.Title</p>
            }
            else
            {
                <p @onclick="OpenClose" class="pb-1" style="cursor:pointer;">@PropertyMenuStructureNode.Nameable.Title</p>
            }


            @if (hasNoChildren)
            {
                switch (@PropertyMenuStructureNode.InputType)
                {
                    case InputType.TextInput:
                        <p>
                            <input class="form-control" type="text" placeholder="@PropertyMenuStructureNode.Nameable.Title" aria-label="Repository description"/>
                        </p>
                        break;

                    case InputType.TextArea:
                        <p>
                            <textarea class="form-control" type="text" placeholder="@PropertyMenuStructureNode.Nameable.Title" aria-label="Repository description" />
                        </p>
                        break;

                    case InputType.AddMultiple:
                        <AddList Description="@PropertyMenuStructureNode.Nameable.Description" OnChange="SetValueDatabaseTables" />
                        break;
                    case InputType.Button:
                        <p>@PropertyMenuStructureNode.Nameable.Description</p>
                        <button @onclick="ClickButton" class="btn">@PropertyMenuStructureNode.Nameable.Title</button>
                        break;

                    case InputType.WorkflowDataInput:
                        <WorkflowDataInput UpdatedField="UpdateChangedWorkflow" Title="@PropertyMenuStructureNode.Nameable.Title" DropdownItems="@PropertyMenuStructureNode.AnyTypeInput.ListOfStrings" />
                        break;
                    case InputType.DatabaseTableModel:
                        <DatabaseTableModelProperties DatabaseTableChanged="DatabaseTableChanged" />
                        break;
                }
            }
            else
            {
                @if (PropertyMenuStructureNode.IsOpen)
                {
                    <PropertyList PropertiesMenu="PropertiesMenu" PropertyMenuStructure="PropertyMenuStructureNode.PropertyMenuStructure"/>
                }
            }

        </div>
    </div>
</Window>

@code {

    /// <summary>
    /// The menu structure to be rendered.
    /// </summary>
    [Parameter]
    public PropertyMenuStructureNode PropertyMenuStructureNode { get; set; } = new();

    /// <summary>
    /// Provide a reference to the parent PropertiesMenu component so that child component can call ShouldRender.
    /// </summary>
    [Parameter]
    public PropertiesMenu? PropertiesMenu { get; set; }

    private void OpenClose()
    {
        PropertyMenuStructureNode.IsOpen = !PropertyMenuStructureNode.IsOpen;
        PropertiesMenu?.ShouldRender();
    }

    private void SetValueDatabaseTables(List<string> tables)
    {
        if (PropertyMenuStructureNode.OnValueChange != null)
        {
            PropertyMenuStructureNode.OnValueChange(new() { ListOfStrings = tables });
        }
    }

    private void ClickButton()
    {
        PropertyMenuStructureNode.OnValueChange?.Invoke(new AnyTypeValue());
    }

    private void UpdateChangedWorkflow(string type, string name)
    {
        int index = PropertyMenuStructureNode!.AnyTypeInput!.Number;
        PropertyMenuStructureNode.OnValueChange?.Invoke(new AnyTypeValue()
        {
            ListOfStrings = new List<string>()
            {
                name,
                type
            },
            Number = index
        });
    }


    private void DatabaseTableChanged(DatabaseTable databaseTable)
    {
        Console.WriteLine("Database Table Changed");
        PropertyMenuStructureNode.OnValueChange?.Invoke(new AnyTypeValue()
        {
            DatabaseTable = databaseTable
        });
    }

}
