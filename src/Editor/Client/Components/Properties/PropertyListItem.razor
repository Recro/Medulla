<div class="TimelineItem TimelineItem--condensed">
    @{
        var hasNoChildren = PropertyMenuStructureNode.HasNoChildren();
    }
    <PropertyListItemIcon PropertyMenuStructureNode="PropertyMenuStructureNode" PropertiesMenu="PropertiesMenu" />
    <div class="TimelineItem-body">
        @if (hasNoChildren)
        {
            <p class="pb-1">@PropertyMenuStructureNode.Nameable.Title</p>
        }
        else
        {
            <p @onclick="OpenClose" class="pb-1" style="cursor:pointer;">@PropertyMenuStructureNode.Nameable.Title</p>
        }


        @if (hasNoChildren)
        {
            @if (@PropertyMenuStructureNode.InputType == InputType.TextInput)
            {
                <p>
                    <input class="form-control" type="text" placeholder="@PropertyMenuStructureNode.Nameable.Title" aria-label="Repository description"/>
                </p>
            }
            else if (@PropertyMenuStructureNode.InputType == InputType.TextArea)
            {
                <p>
                    <textarea class="form-control" type="text" placeholder="@PropertyMenuStructureNode.Nameable.Title" aria-label="Repository description" />
                </p>
            }

        }
        else
        {
            @if (PropertyMenuStructureNode.IsOpen)
            {
                <PropertyList PropertiesMenu="PropertiesMenu" PropertyMenuStructure="PropertyMenuStructureNode.PropertyMenuStructure"/>
            }
        }

    </div>
</div>

@code {

    [Parameter]
    public PropertyMenuStructureNode PropertyMenuStructureNode { get; set; } = new();

    [Parameter]
    public PropertiesMenu? PropertiesMenu { get; set; }

    void OpenClose()
    {
        PropertyMenuStructureNode.IsOpen = !PropertyMenuStructureNode.IsOpen;
        PropertiesMenu?.ShouldRender();
    }


}
