
@using Medulla.Editor.Client.AppRenderer;
@using Medulla.Editor.Client.AppRenderer.Options;
@using Medulla.Editor.Client.AppRenderer.RendererComponents;



<div style="display: grid; grid-template-columns: 70% auto;">
    <div>
        <Renderer AppNodeList=appNodeList />
    </div>

    <div class="Box" style="height: 100vh">

        @if (tmpChildAppNodeList != null)
        {

            <nav aria-label="Breadcrumb" class="p-4">
                <ol>
                    <li class="breadcrumb-item">
                        <a style="cursor: pointer;" @onclick=@(() => tmpChildAppNodeList = null)>root</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="https://github.com/business/customers">Customers</a>
                    </li>
                    <li class="breadcrumb-item breadcrumb-item-selected">
                        <a href="https://github.com/business/customers/mailchimp" aria-current="page">MailChimp</a>
                    </li>
                </ol>
            </nav>
        }

        <nav class="menu" aria-label="Person settings">
            @foreach (var appNode in GetAppNodeList())
            {
                <span class="menu-item" aria-current="page">
                    @appNode.Component
                    <MenuItemButton OnClick="@nodeMinus">
                        <Minus/>
                    </MenuItemButton>
                    <MenuItemButton OnClick="@nodeCopy">
                        <Copy/>
                    </MenuItemButton>
                    <MenuItemButton OnClick="@nodeSettings">
                        <Settings/>
                    </MenuItemButton>
                    <MenuItemButton OnClick="@nodeUpArrow">
                        <UpArrow/>
                    </MenuItemButton>
                    <MenuItemButton OnClick="@nodeDownArrow">
                        <DownArrow/>
                    </MenuItemButton>

                    <span style="cursor: pointer;" @onclick=@(() => nodeChildren(appNode)) class="Label">
                        <div style="
                            position: relative;
                            top: 1px;">
                            <span style="font-weight: bold;font-size: 15px;padding: 4px;">
                                @appNode?.Children.Count
                            </span>
                        </div>
                    </span>
                </span>
            }


            @if (isAddingNewComponent)
            {
                <div class="Box p-4">
                    <p>Adding a new component</p>

                    <details class="details-reset details-overlay" @attributes="@GetNewComponentOpen()">
                        <summary style="pointer-events: none" class="btn" aria-haspopup="true">
                            @if (newComponent == null)
                            {
                                <span>Choose a component</span>
                            }
                            else
                            {
                                <span>@newComponent</span>
                            }
                        </summary>
                        <div class="SelectMenu" style="display: block; position: static;">
                            <div class="SelectMenu-modal">
                                <div class="SelectMenu-list">
                                    <button @onclick=@(() => SetNewComponentOpen("Box")) class="SelectMenu-item" role="menuitem">Box</button>
                                    <button @onclick=@(() => SetNewComponentOpen("Button")) class="SelectMenu-item" role="menuitem">Button</button>
                                </div>
                            </div>
                        </div>
                    </details>

                    <div class="flex mt-5">
                        <span @onclick="@newcomponent" style="cursor:pointer;" class="btn" type="button">
                            Cancel
                        </span>
                        @if (newComponent != null)
                        {
                            <button @onclick=@(() => AddComponent(newComponent)) class="btn" type="button">Add</button>
                        }
                        else
                        {
                            <button class="btn" type="button">Add</button>
                        }

                    </div>

                </div>
            }
            else
            {
                <span style="cursor:pointer;" @onclick="@newcomponent" class="menu-item" href="#url">
                    New Component
                </span>
            }
        </nav>

    </div>
</div>

@code {

    private void AddComponent(string component)
    {
        if (tmpChildAppNodeList != null)
        {
            tmpChildAppNodeList.Add(new AppNode
            {
                Component = component
            });

        }
        else
        {
            appNodeList.Add(new AppNode
            {
                Component = component
            });
        }
        isNewComponentOpen = false;
        isAddingNewComponent = false;
        StateHasChanged();
    }

    private bool isAddingNewComponent = false;
    private bool isNewComponentOpen = true;
    private string? newComponent = null;

    private Dictionary<string, object> GetNewComponentOpen()
    {
        var options = new Dictionary<string, object>()
        {
            { "open", isNewComponentOpen },
        };

        return options;
    }

    private void SetNewComponentOpen(string component)
    {
        isNewComponentOpen = false;
        newComponent = component;
        StateHasChanged();
    }

    private List<AppNode>? tmpChildAppNodeList = null;

    private List<AppNode> GetAppNodeList()
    {
        var nodeList = new List<AppNode>();

        if (tmpChildAppNodeList != null)
        {
            nodeList = tmpChildAppNodeList;
        }
        else
        {
            nodeList = appNodeList;
        }

        return nodeList;
    }

    private void nodeMinus()
    {
        Console.WriteLine("clicked minus button");
    }

    private void nodePlus()
    {
        Console.WriteLine("clicked plus button");
    }

    private void nodeCopy()
    {
        Console.WriteLine("clicked copy button");
    }

    private void nodeSettings()
    {
        Console.WriteLine("clicked settings button");
    }

    private void nodeUpArrow()
    {
        Console.WriteLine("clicked up arrow button");
    }

    private void nodeDownArrow()
    {
        Console.WriteLine("clicked down arrow button");
    }

    private void nodeChildren(AppNode node)
    {
        tmpChildAppNodeList = node.Children;
        StateHasChanged();
    }

    private void newcomponent()
    {
        isAddingNewComponent = !isAddingNewComponent;
        isNewComponentOpen = true;
        newComponent = null;
        StateHasChanged();
        Console.WriteLine("clicked new component button");
    }

    private List<AppNode> appNodeList = new List<AppNode>() {
        /*new AppNode() {
            Component = "Button",
            Options = new () {
                Options = new () {
                    new () {
                        Key = new Key() {
                            KeyName = "Content"
                        },
                        Value = new Value() {
                            ValueOfKey = "Create Something Awesome!"
                        }
                    }
                }
            }
        },
        new AppNode() {
            Component = "Button",
            Options = new () {
                Options = new () {
                    new () {
                        Key = new Key() {
                            KeyName = "Content"
                        },
                        Value = new Value() {
                            ValueOfKey = "Create Something Awesome!"
                        }
                    }
                }
            }
        },
        new AppNode() {
            Component = "Box",
            Options = new () {
                Options = new () {
                    new () {
                        Key = new Key() {
                            KeyName = "Content"
                        },
                        Value = new Value() {
                            ValueOfKey = "Create Something Awesome!"
                        }
                    }
                }
            },
            Children = new() {
                new AppNode() {
                Component = "Button",
                Options = new () {
                    Options = new () {
                        new () {
                            Key = new Key() {
                                KeyName = "Content"
                            },
                            Value = new Value() {
                                ValueOfKey = "Create Something Awesome!"
                            }
                        }
                    }
                }
            },
            }
        },*/
    };


}


