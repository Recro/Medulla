@inherits BaseComponent

@using Medulla.Frontend.Client.Code
@using Medulla.Frontend.Client.Library.Utilities.Unique
@using Microsoft.JSInterop
@using Microsoft.JSInterop.Infrastructure
<button
    @ref="Element"
    @onmouseover="MouseOver"
    @onclick="Clicked"
    class="btn @GetBtnSize() @GetBtnType() @GetBtnLink() @GetMargin() @GetPadding()" type="button">
    @Content
    @ChildContent
</button>

@code {

    /*
     * These parameters need to be modifiable in Properties window
     */
    [Parameter]
    public string Content { get; set; } = "{No Button Content}";

    [Parameter]
    public string Size { get; set; } = "";

    [Parameter]
    public string IsBlock { get; set; } = "";

    [Parameter]
    public string IsLink { get; set; } = "";
    
    ElementReference Element;


    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    public class MyJsRuntime : JSInProcessRuntime
    {
        protected override void BeginInvokeJS(long taskId, string identifier, string? argsJson, JSCallResultType resultType, long targetInstanceId)
        {
            throw new NotImplementedException();
        }

        protected override void EndInvokeDotNet(DotNetInvocationInfo invocationInfo, in DotNetInvocationResult invocationResult)
        {
            throw new NotImplementedException();
        }

        protected override string? InvokeJS(string identifier, string? argsJson, JSCallResultType resultType, long targetInstanceId)
        {
            throw new NotImplementedException();
        }
    }
    
    private async void MouseOver(MouseEventArgs e)
    {
        var runtime = new MyJsRuntime();
        var result = await runtime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", Element);
    }

    private string GetBtnSize()
    {
        if (Size != "sm" && Size != "large")
            return "";
        return "btn-" + Size;
    }

    private string GetBtnLink()
    {
        if (IsLink == "True")
            return "btn-link";
        return "";
    }

    private string GetBtnType()
    {
        if (IsBlock == "True") return "btn-block";
        return "";
    }

    protected override Properties GetProperties()
    {
        Properties properties = new();
        // properties.PropertyList.Add(new() { Name = "Content", InputDescription = "Content", DefaultValue = "", InputType = "input" });
        // properties.PropertyList.Add(new() { Name = "Size", InputDescription = "Size", DefaultValue = "", InputType = "input" });
        properties.PropertyList.Add(new() 
        { 
            Name = "Content", 
            InputDescription = "Content", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "Placeholder", "Content"
                },
                { "PropertyName", "Content" }
            }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.TextInput" }
            );
        properties.PropertyList.Add(new() 
        { 
            Name = "Size", 
            InputDescription = "Size", 
            DefaultValue = new Dictionary<string, object>()
            {
            {
                "DropdownItems", new Dictionary<string, string>() {
                    { "Default", "" },
                    { "Large", "large" },
                    { "Small", "sm" }
                }
            },
            {
                "Title", "Size"
            },
            { "PropertyName", "Size" }
        }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown" }
            );
        properties.PropertyList.Add(new() 
        { 
            Name = "IsLink", 
            InputDescription = "Is Link", 
            DefaultValue = new Dictionary<string, object>()
            {
                { "PropertyName", "IsLink" }
            }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Checkbox" }
            );
        
        properties.PropertyList.Add(new() 
        { 
            Name = "IsBlock", 
            InputDescription = "Is Block", 
            DefaultValue = new Dictionary<string, object>()
            {
                { "PropertyName", "IsBlock" }
            }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Checkbox" }
            );
        // properties.PropertyList.Add(new() { Name = "IsLink", InputDescription = "IsLink", DefaultValue = "", InputType = "input" });
        return properties;
    }

    protected override bool IsClickable()
    {
        return true;
    }
    
    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }



}