@inherits BaseComponent

@using Medulla.Frontend.Client.Code
@using Medulla.Frontend.Client.Library.Utilities.Unique
<button 
    @onclick="Clicked"
    class="btn @GetBtnSize() @GetBtnType() @GetBtnLink() @GetMargin() @GetPadding()" type="button">
    @Content
    @ChildContent
</button>

@code {

    /*
     * These parameters need to be modifiable in Properties window
     */
    [Parameter]
    public string Content { get; set; } = "{No Button Content}";

    [Parameter]
    public string Size { get; set; } = "";

    [Parameter]
    public string Type { get; set; } = "";

    [Parameter]
    public string IsLink { get; set; } = "";

    private string GetBtnSize()
    {
        if (Size != "sm" && Size != "large")
            return "";
        return "btn-" + Size;
    }

    private string GetBtnLink()
    {
        if (IsLink == "true")
            return "btn-link";
        return "";
    }

    private string GetBtnType()
    {
        if (Type == "block") return "btn-block";
        return "";
    }

    protected override Properties GetProperties()
    {
        Properties properties = new();
        // properties.PropertyList.Add(new() { Name = "Content", InputDescription = "Content", DefaultValue = "", InputType = "input" });
        // properties.PropertyList.Add(new() { Name = "Size", InputDescription = "Size", DefaultValue = "", InputType = "input" });
        properties.PropertyList.Add(new() 
        { 
            Name = "Content", 
            InputDescription = "Content", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "Placeholder", "Content"
                },
                { "PropertyName", "Content" }
            }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.TextInput" }
            );
        properties.PropertyList.Add(new() 
        { 
            Name = "Size", 
            InputDescription = "Size", 
            DefaultValue = new Dictionary<string, object>()
            {
            {
                "DropdownItems", new Dictionary<string, string>() {
                    { "Default", "" },
                    { "Large", "large" },
                    { "Small", "sm" }
                }
            },
            {
                "Title", "Size"
            },
            { "PropertyName", "Size" }
        }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown" }
            );
        properties.PropertyList.Add(new() 
        { 
            Name = "IsLink", 
            InputDescription = "Is Link", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "No", "" },
                        { "Yes", "true" }
                    }
                },
                {
                    "Title", "Is Link"
                },
                { "PropertyName", "IsLink" }
            }, 
            InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown" });
        
        properties.PropertyList.Add(new() 
        { 
            Name = "Type", 
            InputDescription = "Type", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Default", "" },
                        { "Block", "block" }
                    }
                },
                {
                    "Title", "Block Type"
                },
                { "PropertyName", "Type" }
            }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown" }
            );
        // properties.PropertyList.Add(new() { Name = "IsLink", InputDescription = "IsLink", DefaultValue = "", InputType = "input" });
        return properties;
    }

    protected override bool IsClickable()
    {
        return true;
    }
    
    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }



}