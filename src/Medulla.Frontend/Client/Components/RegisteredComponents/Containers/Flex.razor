@inherits BaseComponentContainer


<div 
class="editor-border "
    @onclick="Clicked"
style="min-width: 100px;min-height: 100px;">
    <div class="medulla-flex-container d-flex @FlexDirection @JustifyContent @GetMargin() @GetPadding()">
        @ChildContent
    </div>
    
    <svg
            @ondrop="HandleDrop"
            ondragover="event.preventDefault();"
            style="
            margin: 1em;
        height: 100px;
        border: thin solid;
        cursor: copy;
    " xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 editor-place" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
        </svg>
    
</div>


@code {

    [Parameter]
    public string FlexDirection { get; set; } = "flex-row";

    [Parameter]
    public string JustifyContent { get; set; } = "flex-justify-start";



    protected override List<EditorViewNode> GetChildrenToAddOnAdd()
    {
        return new();
    }

    protected override void AfterAddComponent(Medulla.Frontend.Client.Components.Editor.Editor editor, Medulla.Frontend.Client.Library.Utilities.Unique.UniqueId uniqueId)
    {

        return;
    }

    protected override Properties GetProperties()
    {
        Properties properties = new();

        properties.PropertyList.Add(new()
        {
            Name = "FlexDirection",
            InputDescription = "Flex Direction",
            DefaultValue = new Dictionary<string, object>()
{
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Row", "flex-row" },
                        { "Column", "flex-column" }
                    }
                },
                {
                    "Title", "Flex Direction"
                },
                { "PropertyName", "FlexDirection" }
            },
            InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown"
        }
            );

        properties.PropertyList.Add(new()
        {
            Name = "JustifyContent",
            InputDescription = "Justify Content",
            DefaultValue = new Dictionary<string, object>()
{
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Start", "flex-justify-start" },
                        { "End", "flex-justify-end" },
                        { "Center", "flex-justify-center" },
                        { "Between", "flex-justify-between" },
                        { "Around", "flex-justify-around" },
                    }
                },
                {
                    "Title", "Justify Content"
                },
                { "PropertyName", "JustifyContent" }
            },
            InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown"
        }
            );


        return properties;
    }

    protected override bool IsHoverComponentContainer()
    {
        return true;
    }

    protected override bool IsClickable()
    {
        return false;
    }

    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }

}


<style>

    .medulla-flex-container {
        min-height: 100px;
        padding-top: 2.3em;
    }
    
    .editor-border {
        border: thin solid purple;
    }


</style>