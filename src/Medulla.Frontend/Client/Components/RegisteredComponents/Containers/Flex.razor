@inherits BaseComponent

@if (Editor.ActiveContainers.Contains(this.UniqueId))
{
    @if (!HasChildren())
    {
    <div @ondragenter="MouseOver"
         @ondragleave="MouseLeave"
         @onclick="Clicked"
         style="min-width: 100px;min-height: 100px;" class="d-flex @FlexDirection @GetMargin() @GetPadding()">
        Flex Container
        @{
            var OnChangeDropdown = new Dictionary<string, Action<Dictionary<string, string>>>()
            {
                {"EventCallback", (Dictionary<string,string> test) =>
                {
                    Console.WriteLine(test["Value"]);
                    if (test["Value"] == "active")
                    {
                        Editor.ActiveContainers.Add(this.UniqueId);
                    }
                    else
                    {
                        if (Editor.ActiveContainers.Contains(this.UniqueId))
                        {
                            Editor.ActiveContainers.Remove(this.UniqueId);
                        }
                    }
                    Editor.StateChanged();
                }}
            };
        }
        <Dropdown Title="Is Active" DropdownItems="IsActiveDropDownItems" PropertyName="Test" OnChange="OnChangeDropdown" />
        @if (@ReadyToAdd())
        {
            <p>Ready to Add</p>
        }
        else
        {
            <p>Not ready to add compontnts to container. Click container to add components.</p>
        }
        @ChildContent
    </div>
    } else
    {
    <div @onclick="Clicked"
         style="min-width: 100px;min-height: 100px;" class="d-flex @FlexDirection @GetMargin() @GetPadding()">
        Flex Container

        @{
            var OnChangeDropdown = new Dictionary<string, Action<Dictionary<string, string>>>()
            {
                {"EventCallback", (Dictionary<string,string> test) =>
                {
                    Console.WriteLine(test["Value"]);
                    if (test["Value"] == "active")
                    {
                        Editor.ActiveContainers.Add(this.UniqueId);
                    }
                    else
                    {
                        if (Editor.ActiveContainers.Contains(this.UniqueId))
                        {
                            Editor.ActiveContainers.Remove(this.UniqueId);
                        }
                    }
                    Editor.StateChanged();
                }}
            };
        }
        <Dropdown Title="Is Active" DropdownItems="IsActiveDropDownItems" PropertyName="Test" OnChange="OnChangeDropdown" />

        @ChildContent
    </div>
    }
}
else
{
    <div @onclick="Clicked"
          @ondragenter="MouseOver"
          @ondragleave="MouseLeave"
         style="min-width: 100px;min-height: 100px;">
        Flex Container
        
        @{
            var OnChangeDropdown = new Dictionary<string, Action<Dictionary<string, string>>>()
            {
                {"EventCallback", (Dictionary<string,string> test) =>
                {
                    Console.WriteLine(test["Value"]);
                    if (test["Value"] == "active")
                    {
                        Editor.ActiveContainers.Add(this.UniqueId);
                    }
                    else
                    {
                        if (Editor.ActiveContainers.Contains(this.UniqueId))
                        {
                            Editor.ActiveContainers.Remove(this.UniqueId);
                        }
                    }
                    Editor.StateChanged();
                }}
            };
        }
        <Dropdown Title="Is Active" DropdownItems="IsActiveDropDownItems" PropertyName="Test" OnChange="OnChangeDropdown" />
        
        <div style="pointer-events: none" class="d-flex @FlexDirection @GetMargin() @GetPadding()">
            @ChildContent
        </div>
        
    </div>
}


@code {

    private Dictionary<string, string> IsActiveDropDownItems = new Dictionary<string, string>()
    {
        {"Active", "active"},
        {"Not-Active", "not-active"}
    };
    
    [Parameter]
    public string FlexDirection { get; set; } = "flex-row";


    public bool HasChildren() {
        bool wasFound = false;
        bool hasChildren = Editor.DoesEditorViewNodeHaveChildrenWithUniqueId(Editor.EditorViewNode, this.UniqueId, ref wasFound);
        @*if (!wasFound)
        {
            throw new Exception("this container wasn't found");
        }*@
        return hasChildren;
    }

    public bool ReadyToAdd()
    {
        if (Editor.LastActiveContainer == null)
            return false;
        if (Editor.LastActiveContainer.Equals(this.UniqueId)) {
            return true;
        }
        else
        {
            return false;
        }
    }


    protected override Properties GetProperties()
    {
        Properties properties = new();

        properties.PropertyList.Add(new()
        {
            Name = "FlexDirection",
            InputDescription = "Flex Direction",
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Row", "flex-row" },
                        { "Column", "flex-column" }
                    }
                },
                {
                    "Title", "Flex Direction"
                },
                { "PropertyName", "FlexDirection" }
            }, InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown" }
            );


        return properties;
    }

    protected override bool IsHoverComponentContainer()
    {
        return true;
    }

    protected override bool IsClickable()
    {
        return false;
    }

    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }

}