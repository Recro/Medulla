@inherits BaseComponent


@{
    var OnChangeDropdown = new Dictionary<string, Action<Dictionary<string, string>>>()
{
                {"EventCallback", (Dictionary<string,string> test) =>
                {
                    if (test["Value"] == "active")
                    {
                        Editor.ActiveContainers.Add(this.UniqueId);
                    }
                    else
                    {
                        if (Editor.ActiveContainers.Contains(this.UniqueId))
                        {
                            Editor.ActiveContainers.Remove(this.UniqueId);
                        }
                    }
                    Editor.StateChanged();
                }}
            };
}

<div style="position: relative;">
    <div style="position: absolute; top:-2.3em;">
        <Dropdown Title="Is Container Active" DropdownItems="IsActiveDropDownItems" PropertyName="Test" OnChange="OnChangeDropdown" />
    </div>
    @if (Editor.ActiveContainers.Contains(this.UniqueId))
    {
        @if (!HasChildren())
        {

            <div @ondragenter="MouseOver"
                 @ondragleave="MouseLeave"
                 @onclick="Clicked"
                 style="min-width: 100px;min-height: 100px;" class="medulla-flex-container d-flex @FlexDirection @JustifyContent @GetMargin() @GetPadding()">
                @ChildContent
            </div>
        }
        else
        {
            <div @onclick="Clicked"
                 style="min-width: 100px;min-height: 100px;" class="medulla-flex-container d-flex @FlexDirection @JustifyContent @GetMargin() @GetPadding()">
                @ChildContent
            </div>
        }
    }
    else
    {
        <div @onclick="Clicked"
             @ondragenter="MouseOver"
             @ondragleave="MouseLeave"
             style="min-width: 100px;min-height: 100px;">
            <div style="pointer-events: none" class="medulla-flex-container d-flex @FlexDirection @JustifyContent @GetMargin() @GetPadding()">
                @ChildContent
            </div>
        </div>
    }
</div>


@code {

    private Dictionary<string, string> IsActiveDropDownItems = new Dictionary<string, string>()
{
        {"Active", "active"},
        {"Not-Active", "not-active"}
    };

    [Parameter]
    public string FlexDirection { get; set; } = "flex-row";

    [Parameter]
    public string JustifyContent { get; set; } = "flex-justify-start";


    public bool HasChildren()
    {
        bool wasFound = false;
        bool hasChildren = Editor.DoesEditorViewNodeHaveChildrenWithUniqueId(Editor.EditorViewNode, this.UniqueId, ref wasFound);
        @*if (!wasFound)
            {
                throw new Exception("this container wasn't found");
            }*@
        return hasChildren;
    }

    public bool ReadyToAdd()
    {
        if (Editor.LastActiveContainer == null)
            return false;
        if (Editor.LastActiveContainer.Equals(this.UniqueId))
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    protected override Properties GetProperties()
    {
        Properties properties = new();

        properties.PropertyList.Add(new()
        {
            Name = "FlexDirection",
            InputDescription = "Flex Direction",
            DefaultValue = new Dictionary<string, object>()
{
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Row", "flex-row" },
                        { "Column", "flex-column" }
                    }
                },
                {
                    "Title", "Flex Direction"
                },
                { "PropertyName", "FlexDirection" }
            },
            InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown"
        }
            );

        properties.PropertyList.Add(new()
        {
            Name = "JustifyContent",
            InputDescription = "Justify Content",
            DefaultValue = new Dictionary<string, object>()
{
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Start", "flex-justify-start" },
                        { "End", "flex-justify-end" },
                        { "Center", "flex-justify-center" },
                        { "Between", "flex-justify-between" },
                        { "Around", "flex-justify-around" },
                    }
                },
                {
                    "Title", "Justify Content"
                },
                { "PropertyName", "JustifyContent" }
            },
            InputType = "Medulla.Frontend.Client.Components.Editor.PropertiesWindow.PropertyComponents.Dropdown"
        }
            );


        return properties;
    }

    protected override bool IsHoverComponentContainer()
    {
        return true;
    }

    protected override bool IsClickable()
    {
        return false;
    }

    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }

}


<style>

    .medulla-flex-container {
        background: purple;
        min-height: 100px;
        padding-top: 2.3em;
    }


</style>