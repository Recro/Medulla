@using Medulla.Frontend.Client.Library.Utilities.Unique
@inherits BaseComponentContainer

<div
    class="dropzone @hoverClass" 
    ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);"
    @ondrop="HandleDrop"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave"
    style="cursor:auto; background: lightgray;position: relative;
                border: thin dashed gray;
                text-align: center;
                text-transform: uppercase;
                color: gray;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;">
    Column
    @ChildContent
    <svg @onclick="AddColumnAfter" style="height: 20px;cursor: pointer;
                    color: green;
                    position: absolute;
                    right: 0;
                    background: purple;
                    color: white;
                    border-radius: 21px;
                    box-shadow: 1px 1px 3px grey;
                            }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
</div>



@code {

    protected override void AfterAddComponent(Editor editor, Library.Utilities.Unique.UniqueId uniqueId)
    {

    }

    private void AddColumnAfter()
    {
        Editor.CurrentComponent = new EditorViewNode()
        {
            Type = "Medulla.Frontend.Client.Components.RegisteredComponents.Containers.Grids.Columns.Column",
            UniqueId = new UniqueId(),
            IsContainer = false,
            Parameters = new()
        };
        Editor.PlaceAfter = true;
        Editor.PlaceInUniqueId = this.UniqueId;
        Editor.AddComponentToEditorViewNode(Editor.EditorViewNode);
        Editor.StateChanged();
    }

    protected override List<EditorViewNode?> GetChildrenToAddOnAdd()
    {
        var list = new List<EditorViewNode?>();
        list.Add(new EditorViewNode() {
            Type = "",
            UniqueId = new Library.Utilities.Unique.UniqueId(),
            IsContainer = true
        });
        return list;
    }

    protected override Properties GetProperties()
    {
        return new Properties();
    }

    protected override bool IsClickable()
    {
        return false;
    }

    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }

    protected override bool IsHoverComponentContainer()
    {
        return true;
    }

}


<style>
    
    .hovering {
        background: #6f2fe47b!important;
    }
    
    
</style>