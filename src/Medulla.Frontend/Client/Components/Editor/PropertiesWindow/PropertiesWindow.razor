@using System.ComponentModel.DataAnnotations
<Window WindowTitle="@WindowTitle">
    <table class="width-full">
        <thead class="bg-gray-50">
            <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Property
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Value
                </th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200 width-fit">
            @for (int i = 0; i < PropertyList.PropertyList.Count; i++)
            {
                <tr class="Box @(i + 1 == PropertyList.PropertyList.Count ? "border-bottom-0" : "") ">

                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="ml-4">
                                <div class="text-sm font-medium text-gray-900">
                                    @PropertyList.PropertyList[i].InputDescription
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        @{
                            int inputId = i;
                        }
                        <DynamicComponent
                            Type="Type.GetType(PropertyList.PropertyList[inputId].InputType)" 
                            Parameters="GetParametersForProperty(PropertyList.PropertyList[inputId])" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
</Window>

@code {

    [Parameter]
    [Required]
    public Properties PropertyList { get; set; } = new();

    [Parameter]
    [Required]
    public string WindowTitle { get; set; } = "Properties Window";
    
    [Parameter]
    public Editor Editor { get; set; }

    private Dictionary<string, object> GetParametersForProperty(Property property)
    {
        const string onChangeKey = "OnChange";
        if (!property.DefaultValue.ContainsKey(onChangeKey))
        {
            property.DefaultValue.Add(onChangeKey, new Dictionary<string, Action<Dictionary<string,string>>>()
            {
                {"EventCallback", UpdatePropertyValue}
            });
        }
        return property.DefaultValue;
    }

    void UpdatePropertyValue(Dictionary<string, string> updateValues) {
        Editor.UpdateCurrentComponentProperty(updateValues["PropertyName"], updateValues["Value"]);
    }


}