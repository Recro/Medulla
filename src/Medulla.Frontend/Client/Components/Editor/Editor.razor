@using Medulla.Frontend.Client.Components.Editor.PropertiesWindow
@using Medulla.Frontend.Client.Library.Utilities.Unique

<div class="d-flex flex-row">
    <CascadingValue Value="this">
        <div class="width-full">
            <EditorView EditorViewNode="EditorViewNode" />
        </div>
        <div style="width: 40vw;max-height:100vh;overflow: scroll;">
            <TranslateComponentWindow Editor="this" />
            <PaletteWindow ComponentCategories="_paletteComponentCategories"/>
            <PropertiesWindow Editor="this" PropertyList="_properties"/>
        </div>
    </CascadingValue>
</div>


@code {

    public EditorViewNode CurrentComponent { get; set; } = default!;
    public UniqueId CurrentPropertiesForComponentUniqueId;


    public EditorViewNode EditorViewNode { get; set; } = new()
    {
        Type = "Medulla.Frontend.Client.Components.RegisteredComponents.Containers.Grids.Columns.OneColumnGrid",
        Children = { },
        UniqueId = new UniqueId()
    };


    public void SetEditorViewNodeParameterIfUniqueIdEquals(EditorViewNode editorViewNode, string name, string value)
    {
        if (editorViewNode.UniqueId.Equals(CurrentPropertiesForComponentUniqueId))
        {
            editorViewNode.Parameters[name] = value;
        }
        else
        {
            for (var i = 0; i < editorViewNode.Children.Count; i++)
            {
                SetEditorViewNodeParameterIfUniqueIdEquals(editorViewNode.Children[i], name, value);
            }
        }

    }

    public string GetEditorViewNodeParameterIfUniqueIdEquals(EditorViewNode editorViewNode, string name)
    {
        if (editorViewNode.UniqueId.Equals(CurrentPropertiesForComponentUniqueId))
        {
            string paramValue = editorViewNode.Parameters[name].ToString();
            if (paramValue == null)
            {
                return "";
            }
            else
            {
                return paramValue;
            }
        }
        else
        {
            for (var i = 0; i < editorViewNode.Children.Count; i++)
            {
                return GetEditorViewNodeParameterIfUniqueIdEquals(editorViewNode.Children[i], name);
            }
        }
        return "";
    }

    public EditorViewNode GetEditorViewNodeIfUniqueIdEquals(EditorViewNode editorViewNode, UniqueId uniqueId)
    {
        if (editorViewNode.UniqueId.Equals(uniqueId))
        {
            return editorViewNode;
        }
        else
        {
            for (var i = 0; i < editorViewNode.Children.Count; i++)
            {
                EditorViewNode checkEditorViewNode = GetEditorViewNodeIfUniqueIdEquals(editorViewNode.Children[i], uniqueId);
                if (checkEditorViewNode != null)
                {
                    return checkEditorViewNode;
                }
            }
        }
        return null;
    }


    public void UpdateCurrentComponentProperty(string name, string value)
    {
        SetEditorViewNodeParameterIfUniqueIdEquals(CurrentComponent, name, value);
        StateChanged();
    }

    public string GetComponentPropertyValue(UniqueId uniqueId, string name)
    {
        EditorViewNode activeEditorViewNode = GetEditorViewNodeWithUniqueId(uniqueId);
        Dictionary<string, object> parameters = activeEditorViewNode.Parameters;
        if (parameters.Count > 0) {
            if (parameters[name] != null)
            {
                var param = parameters[name];
                return param.ToString();
            }
            else
            {
                return "";
            }
        } else
        {
            return "";
        }
    }

    public EditorViewNode GetEditorViewNodeWithUniqueId(UniqueId uniqueId)
    {
        return GetEditorViewNodeIfUniqueIdEquals(EditorViewNode, uniqueId);
    }

    public void SetCurrentComponentToEditorViewNodeWithUniqueId(UniqueId uniqueId)
    {
        EditorViewNode? editorViewNode = GetEditorViewNodeWithUniqueId(uniqueId);
        if (editorViewNode == null)
        {
            throw new Exception("GetEditorViewNodeWithUniqueId returned null");
        }
        CurrentComponent = editorViewNode;
    }

    public void SetProperties(Properties properties, UniqueId uniqueId)
    {
        CurrentPropertiesForComponentUniqueId = uniqueId;
        _properties = properties;
        StateChanged();
    }

    public void StateChanged()
    {
        StateHasChanged();
    }

    //Properties
    Properties _properties = new()
    {
        PropertyList = new List<Property>
    {
    }
    };

    static string _iconStr1 = @"<svg style=""width:50px"" xmlns=""http://www.w3.org/2000/svg"" class=""h-6 w-6"" fill=""none"" viewBox=""0 0 24 24"" stroke=""currentColor"" style=""width: 48px;"">
    <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z""></path>
        </svg>";

    static string _buttonIcon = @"<svg style=""width:50px"" xmlns=""http://www.w3.org/2000/svg"" class=""h-6 w-6"" fill=""none"" viewBox=""0 0 24 24"" stroke=""currentColor"">
    <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"" />
        </svg>";

    PaletteComponentCategories _paletteComponentCategories = new()
    {
        ComponentCategories = new List<PaletteComponentCategory>
    {
        new()
        {
            Name = "Grids",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent()
                    {
                        Name = "1 Column Grid", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Containers.Grids.Columns.OneColumnGrid"
                    },
                }
            }
        },
        new()
        {
            Name = "Kanban",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent()
                    {
                        Name = "Kanban Board", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Kanban.BasicKanban"
                    },
                }
            }
        },
        new() {
            Name = "Buttons",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent() {
                        Name = "Small Button", SvgString = _buttonIcon,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Buttons.Button"
                    },
                }
            }
        },
        new() {
            Name = "Alerts",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent() {
                        Name = "FlashAlert", SvgString = _buttonIcon,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Alerts.FlashAlert"
                    },
                },
            }
        },
        new() {
            Name = "Layouts",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent() {
                        Name = "Header", SvgString = _buttonIcon,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Layouts.Header"
                    },
                },
            }
        },
        new() {
            Name = "Inputs",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent() {
                        Name = "TextInput", SvgString = _buttonIcon,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Forms.Inputs.TextInput"
                    },
                },
            }
        },
        new() {
            Name = "Text",
            PaletteWindowComponents = new PaletteWindowComponents()
            {
                ComponentList = new()
                {
                    new PaletteComponent()
                    {
                        Name = "Paragragh", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.Paragragh"
                    },
                    new PaletteComponent(){ Name = "H1", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.H1Text"
                    },
                    new PaletteComponent(){ Name = "H2", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.H2Text"
                    },
                    new PaletteComponent(){ Name = "H3", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.H3Text"
                    },
                    new PaletteComponent(){ Name = "H4", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.H4Text"
                    },
                    new PaletteComponent(){ Name = "H5", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.H5Text"
                    },
                    new PaletteComponent(){ Name = "H6", SvgString = _iconStr1,
                        RenderComponentType = "Medulla.Frontend.Client.Components.RegisteredComponents.Text.H6Text"
                    },
                }
            }
        }
    }
    };


}